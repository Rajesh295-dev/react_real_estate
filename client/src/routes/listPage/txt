@import "../../responsive.scss";

.listPage {
  display: flex;
  flex-direction: row; // Default side-by-side layout
  width: 100%;
  height: 100vh;

  .listContainer {
    flex: 1;
    display: flex; // Default to visible
    flex-direction: column;
    overflow-y: auto;
    padding: 10px;

    @include sm {
      display: none; // Hide on small screens
    }

    .wrapper {
      height: 100%;
      width: 100%;
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 20px;
      overflow-y: auto;
    }
  }

  .mapContainer {
    flex: 1;
    display: flex; // Default to visible
    justify-content: center;
    align-items: center;
    overflow: hidden;
    background-color: #f5f5f5;
    height: 100%;

    @include sm {
      display: none; // Hide on small screens
    }
  }

  .mapListToggle {
    display: flex; // Always visible
    align-self: center;
    position: fixed; // Fixed at the bottom
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: mediumseagreen;
    border-radius: 50px;
    padding: 10px 20px;
    z-index: 999;
    cursor: pointer;
    color: #fff;
    font-size: 14px;
    font-weight: bold;
    text-align: center;

    transition: background-color 0.3s ease, transform 0.3s ease;

    &:hover {
      background-color: #2e8b57;
      transform: translateX(-50%) translateY(-5px);
    }

    @include sm {
      bottom: 15px;
    }
  }
}



import React, { useEffect, useState } from "react";
import "./listPage.scss";
import Filter from "../../component/filter/filter";
import Card from "../../component/card/card";
import Map from "../../component/map/map";
import { Await, useLoaderData } from "react-router-dom";
import { Suspense } from "react";
import Toggle from "../../component/toggle/Toggle";

function ListPage() {
  const data = useLoaderData();
  const [isMapView, setIsMapView] = useState(false);
  const [isLargeScreen, setIsLargeScreen] = useState(window.innerWidth > 738);

  // Resize handler to check screen size
  useEffect(() => {
    const handleResize = () => {
      setIsLargeScreen(window.innerWidth > 738);
    };

    // Add resize event listener
    window.addEventListener("resize", handleResize);

    // Cleanup listener on component unmount
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <div className="listPage">
      {/* List Container */}
      <div
        className="listContainer"
        style={{
          display: isLargeScreen || !isMapView ? "flex" : "none",
        }}
      >
        <div className="wrapper">
          <Filter />
          <Suspense fallback={<p>Loading posts...</p>}>
            <Await
              resolve={data.postResponse}
              errorElement={<p>Error loading posts!</p>}
            >
              {(postResponse) =>
                postResponse.data.map((post) => (
                  <Card
                    key={post.id}
                    item={{
                      id: post.id,
                      title: post.title,
                      price: post.price,
                      images: post.images,
                      address: post.address,
                    }}
                  />
                ))
              }
            </Await>
          </Suspense>
        </div>
      </div>

      {/* Map Container */}
      <div
        className="mapContainer"
        style={{
          display: isLargeScreen || isMapView ? "flex" : "none",
        }}
      >
        <Suspense fallback={<p>Loading map...</p>}>
          <Await
            resolve={data.postResponse}
            errorElement={<p>Error loading map data!</p>}
          >
            {(postResponse) => <Map items={postResponse.data} />}
          </Await>
        </Suspense>
      </div>

      {/* Toggle Button */}
      <div className="mapListToggle">
        <Toggle
          activeView={isMapView ? "map" : "list"}
          setActiveView={(view) => setIsMapView(view === "map")}
          options={["list", "map"]}
        />
      </div>
    </div>
  );
}

export default ListPage;
